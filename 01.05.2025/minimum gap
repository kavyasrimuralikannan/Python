class Solution:
    def maximumGap(self, nums):
        if len(nums) < 2:
            return 0

        min_num, max_num = min(nums), max(nums)
        if min_num == max_num:
            return 0

        n = len(nums)
        

        bucket_size = max(1, (max_num - min_num) // (n - 1))
        bucket_count = (max_num - min_num) // bucket_size + 1


        buckets = [[float('inf'), float('-inf')] for _ in range(bucket_count)]


        for num in nums:
            idx = (num - min_num) // bucket_size
            buckets[idx][0] = min(buckets[idx][0], num)
            buckets[idx][1] = max(buckets[idx][1], num)


        max_gap = 0
        prev_max = min_num

        for bucket_min, bucket_max in buckets:
            if bucket_min == float('inf'):  # Skip empty buckets
                continue
            max_gap = max(max_gap, bucket_min - prev_max)  # Gap between current and previous bucket
            prev_max = bucket_max  # Update previous max

        return max_gap

solution = Solution()
print(solution.maximumGap([3, 6, 9, 1]))  
print(solution.maximumGap([10]))          
print(solution.maximumGap([1, 10000000])) 
